// üî• Firebase Synchronization Module - Modular SDK
// Obs≈Çuguje logowanie i synchronizacjƒô danych miƒôdzy urzƒÖdzeniami

import { auth, db, onAuthStateChanged } from './firebase-config.js';
import { 
    signInWithPopup, 
    GoogleAuthProvider, 
    signOut 
} from "https://www.gstatic.com/firebasejs/12.4.0/firebase-auth.js";
import { 
    doc, 
    getDoc, 
    setDoc, 
    onSnapshot,
    serverTimestamp 
} from "https://www.gstatic.com/firebasejs/12.4.0/firebase-firestore.js";

let currentUser = null;
let unsubscribeSnapshot = null;

// ======================
// AUTHENTICATION
// ======================

function setupAuthUI() {
    const loginBtn = document.getElementById('loginBtn');
    const logoutBtn = document.getElementById('logoutBtn');
    
    console.log('üîß Setting up auth UI...');
    console.log('Login button:', loginBtn);
    console.log('Logout button:', logoutBtn);
    
    if (loginBtn) {
        console.log('‚úÖ Adding click listener to login button');
        loginBtn.addEventListener('click', loginWithGoogle);
    } else {
        console.error('‚ùå Login button not found!');
    }
    
    if (logoutBtn) {
        logoutBtn.addEventListener('click', logout);
    }
}

async function loginWithGoogle() {
    const provider = new GoogleAuthProvider();
    
    try {
        if (typeof playClickSound === 'function') playClickSound();
        const result = await signInWithPopup(auth, provider);
        console.log('‚úÖ Logged in as:', result.user.email);
        if (typeof showNotification === 'function') {
            showNotification('üéâ Zalogowano pomy≈õlnie!', 'success');
        }
    } catch (error) {
        console.error('‚ùå Login error:', error);
        
        if (error.code === 'auth/popup-blocked') {
            if (typeof showNotification === 'function') {
                showNotification('‚ö†Ô∏è Odblokuj wyskakujƒÖce okna aby siƒô zalogowaƒá', 'warning');
            }
        } else if (error.code === 'auth/cancelled-popup-request' || error.code === 'auth/popup-closed-by-user') {
            // User zamknƒÖ≈Ç okno - nic nie r√≥b
        } else {
            if (typeof showNotification === 'function') {
                showNotification('‚ùå B≈ÇƒÖd logowania: ' + error.message, 'error');
            }
        }
    }
}

async function logout() {
    try {
        if (typeof playClickSound === 'function') playClickSound();
        await signOut(auth);
        if (typeof showNotification === 'function') {
            showNotification('üëã Wylogowano pomy≈õlnie', 'success');
        }
    } catch (error) {
        console.error('‚ùå Logout error:', error);
        if (typeof showNotification === 'function') {
            showNotification('‚ùå B≈ÇƒÖd wylogowania', 'error');
        }
    }
}

// ======================
// USER STATE CALLBACKS
// ======================

function onUserLogin(user) {
    currentUser = user;
    
    // Poka≈º info o u≈ºytkowniku
    const loginBtn = document.getElementById('loginBtn');
    const userInfo = document.getElementById('userInfo');
    const userName = document.getElementById('userName');
    const userPhoto = document.getElementById('userPhoto');
    
    if (loginBtn) loginBtn.style.display = 'none';
    if (userInfo) userInfo.style.display = 'flex';
    if (userName) userName.textContent = user.displayName || user.email;
    if (userPhoto) userPhoto.src = user.photoURL || 'https://via.placeholder.com/36';
    
    // Za≈Çaduj dane z Firestore i zawsze ustaw realtime sync
    (async () => {
        try {
            const loaded = await loadDataFromFirestore();
            // Zawsze ustaw realtime sync, nawet je≈õli dane nie zosta≈Çy za≈Çadowane
            // (np. z powodu niedawnego usuniƒôcia). Realtime sync wyczy≈õci flagƒô
            // deletionReload gdy zobaczy ≈ºe dane sƒÖ OK.
            setupRealtimeSync();
            
            if (!loaded) {
                console.log('‚ö†Ô∏è Data load was skipped (recent deletion), but realtime sync is active');
            }
        } catch (err) {
            console.error('‚ùå Error during initial cloud load:', err);
            // WciƒÖ≈º pr√≥buj ustawiƒá realtime sync jako fallback
            try { setupRealtimeSync(); } catch (e) {}
        }
    })();
}

function onUserLogout() {
    currentUser = null;
    
    // Poka≈º przycisk logowania
    const loginBtn = document.getElementById('loginBtn');
    const userInfo = document.getElementById('userInfo');
    
    if (loginBtn) loginBtn.style.display = 'block';
    if (userInfo) userInfo.style.display = 'none';
    
    // Zatrzymaj nas≈Çuchiwanie
    if (unsubscribeSnapshot) {
        unsubscribeSnapshot();
        unsubscribeSnapshot = null;
    }
}

// ======================
// FIRESTORE SYNC
// ======================

async function loadDataFromFirestore() {
    if (!currentUser) return;
    
    // Sprawd≈∫ czy w≈Ça≈õnie usunƒôli≈õmy dane (zapobiega pƒôtli)
    const deletionReloadFlag = sessionStorage.getItem('deletionReload');
    if (deletionReloadFlag) {
        // Sprawd≈∫ czy flaga nie jest zbyt stara (maksymalnie 30 sekund)
        const deletionTimestamp = sessionStorage.getItem('deletionReloadTimestamp');
        const now = Date.now();
        
        if (deletionTimestamp) {
            const timeSinceReload = now - parseInt(deletionTimestamp);
            
            // Je≈õli minƒô≈Ço wiƒôcej ni≈º 30 sekund, usu≈Ñ flagƒô i kontynuuj normalnie
            if (timeSinceReload > 30000) {
                console.log('‚ö†Ô∏è Deletion flag expired (>30s), clearing and loading normally');
                sessionStorage.removeItem('deletionReload');
                sessionStorage.removeItem('deletionReloadTimestamp');
                // Kontynuuj normalne ≈Çadowanie poni≈ºej
            } else {
                // Flaga jest ≈õwie≈ºa, pomi≈Ñ ≈Çadowanie
                console.log('‚ö†Ô∏è Skipping load after deletion to prevent loop (age: ' + timeSinceReload + 'ms)');
                
                // Ustaw timeout aby usunƒÖƒá flagƒô po 30 sekundach
                setTimeout(() => {
                    sessionStorage.removeItem('deletionReload');
                    sessionStorage.removeItem('deletionReloadTimestamp');
                    console.log('‚úì Deletion flag cleared after timeout');
                }, 30000 - timeSinceReload);
                
                return false;
            }
        } else {
            // Brak timestampu - stara wersja flagi, usu≈Ñ jƒÖ
            console.log('‚ö†Ô∏è Old deletion flag found without timestamp, clearing');
            sessionStorage.removeItem('deletionReload');
            // Kontynuuj normalne ≈Çadowanie poni≈ºej
        }
    }
    
    try {
        const docRef = doc(db, 'users', currentUser.uid);
        const docSnap = await getDoc(docRef);
        
        if (docSnap.exists()) {
            const cloudData = docSnap.data();
            console.log('‚òÅÔ∏è Loaded data from cloud:', cloudData);
            
            // Sprawd≈∫ czy dane nie zosta≈Çy usuniƒôte
            if (cloudData.deleted === true || cloudData.data === null) {
                console.log('üóëÔ∏è Dane zosta≈Çy usuniƒôte w chmurze - czyszczƒô lokalnie');
                localStorage.removeItem('kawaiiQuestData');
                if (typeof showNotification === 'function') {
                    showNotification('üóëÔ∏è Dane zosta≈Çy usuniƒôte', 'info');
                }
                // Zwr√≥ƒá false ≈ºeby caller wiedzia≈Ç, ≈ºe pominiƒôto ≈Çadowanie
                return false;
            }
            
            // Merge z lokalnymi danymi (na wypadek offline changes)
            const localData = localStorage.getItem('kawaiiQuestData');
            if (localData) {
                const local = JSON.parse(localData);
                // Je≈õli lokalne dane sƒÖ nowsze, u≈ºyj ich
                if (local.lastModified && cloudData.lastModified) {
                    if (local.lastModified > cloudData.lastModified) {
                        console.log('üì± Local data is newer, syncing to cloud...');
                        await saveDataToFirestore();
                        return;
                    }
                }
            }
            
            // Za≈Çaduj dane z chmury
            if (typeof AppData !== 'undefined' && cloudData.data) {
                Object.assign(AppData, cloudData.data);
                localStorage.setItem('kawaiiQuestData', JSON.stringify(AppData));
                if (typeof updateAllDisplays === 'function') {
                    updateAllDisplays();
                }
            }
            
            if (typeof showNotification === 'function') {
                showNotification('‚òÅÔ∏è Dane za≈Çadowane z chmury', 'success');
            }
            return true;
        } else {
            console.log('üìù No cloud data found, creating new document');
            // Pierwsza synchronizacja - zapisz lokalne dane do chmury
            await saveDataToFirestore();
            return true;
        }
    } catch (error) {
        console.error('‚ùå Error loading from Firestore:', error);
        if (typeof showNotification === 'function') {
            showNotification('‚ö†Ô∏è B≈ÇƒÖd ≈Çadowania danych z chmury', 'warning');
        }
        return false;
    }
}

async function saveDataToFirestore() {
    if (!currentUser) {
        // Nie ma u≈ºytkownika - zapisz tylko lokalnie
        if (typeof AppData !== 'undefined') {
            localStorage.setItem('kawaiiQuestData', JSON.stringify(AppData));
        }
        return;
    }
    
    try {
        const docRef = doc(db, 'users', currentUser.uid);
        
        // Dodaj timestamp do AppData
        if (typeof AppData !== 'undefined') {
            AppData.lastModified = Date.now();
        }
        
        await setDoc(docRef, {
            data: AppData,
            lastModified: AppData.lastModified,
            email: currentUser.email,
            updatedAt: serverTimestamp()
        }, { merge: true });
        
        // Zapisz te≈º lokalnie jako backup
        localStorage.setItem('kawaiiQuestData', JSON.stringify(AppData));
        
        console.log('‚òÅÔ∏è Data saved to cloud');
    } catch (error) {
        console.error('‚ùå Error saving to Firestore:', error);
        
        // Fallback do localStorage je≈õli cloud nie dzia≈Ça
        if (typeof AppData !== 'undefined') {
            localStorage.setItem('kawaiiQuestData', JSON.stringify(AppData));
        }
        
        if (error.code === 'permission-denied') {
            if (typeof showNotification === 'function') {
                showNotification('‚ö†Ô∏è Brak uprawnie≈Ñ do zapisu. Sprawd≈∫ regu≈Çy Firestore.', 'warning');
            }
        }
    }
}

function setupRealtimeSync() {
    if (!currentUser || unsubscribeSnapshot) return;
    
    const docRef = doc(db, 'users', currentUser.uid);
    
    // Nas≈Çuchuj zmian w czasie rzeczywistym
    unsubscribeSnapshot = onSnapshot(docRef, (docSnap) => {
        if (docSnap.exists()) {
            const cloudData = docSnap.data();
            
            console.log('üîÑ Realtime update received from Firestore');
            console.log('Cloud lastModified:', cloudData.lastModified);
            
            // Sprawd≈∫ czy dane zosta≈Çy usuniƒôte
            if (cloudData.deleted === true || cloudData.data === null) {
                console.log('üóëÔ∏è Dane zosta≈Çy usuniƒôte w chmurze - czyszczƒô lokalnie');
                
                // Sprawd≈∫ czy ju≈º prze≈Çadowali≈õmy z powodu usuniƒôcia (z timestampem)
                const alreadyReloaded = sessionStorage.getItem('deletionReload');
                const deletionTimestamp = sessionStorage.getItem('deletionReloadTimestamp');
                
                if (alreadyReloaded) {
                    // Sprawd≈∫ wiek flagi
                    if (deletionTimestamp) {
                        const timeSinceReload = Date.now() - parseInt(deletionTimestamp);
                        
                        // Je≈õli minƒô≈Ço wiƒôcej ni≈º 30 sekund od usuniƒôcia, pozw√≥l na kolejne dzia≈Çania
                        if (timeSinceReload > 30000) {
                            console.log('‚ö†Ô∏è Deletion flag expired, clearing flags');
                            sessionStorage.removeItem('deletionReload');
                            sessionStorage.removeItem('deletionReloadTimestamp');
                            // Pozw√≥l na dalsze przetwarzanie usuniƒôcia
                        } else {
                            console.log('‚ö†Ô∏è Already reloaded for deletion, skipping... (age: ' + timeSinceReload + 'ms)');
                            console.log('DEBUG: onSnapshot skip. session deletionReload=', alreadyReloaded);
                            // Wy≈ÇƒÖcz listener ≈ºeby zapobiec dalszym prze≈Çadowaniom
                            if (unsubscribeSnapshot) {
                                unsubscribeSnapshot();
                                unsubscribeSnapshot = null;
                            }
                            return;
                        }
                    } else {
                        // Stara flaga bez timestampu, zachowaj poprzednie zachowanie
                        console.log('‚ö†Ô∏è Already reloaded for deletion, skipping...');
                        console.log('DEBUG: onSnapshot skip. session deletionReload=', alreadyReloaded);
                        // Wy≈ÇƒÖcz listener ≈ºeby zapobiec dalszym prze≈Çadowaniom
                        if (unsubscribeSnapshot) {
                            unsubscribeSnapshot();
                            unsubscribeSnapshot = null;
                        }
                        return;
                    }
                }
                
                // Wy≈ÇƒÖcz listener ≈ºeby zapobiec pƒôtli
                if (unsubscribeSnapshot) {
                    unsubscribeSnapshot();
                    unsubscribeSnapshot = null;
                }
                
                // Wyczy≈õƒá dane lokalne
                localStorage.clear();
                
                // Ustaw flagƒô ≈ºe prze≈Çadowujemy wraz z timestampem
                sessionStorage.setItem('deletionReload', 'true');
                sessionStorage.setItem('deletionReloadTimestamp', Date.now().toString());
                
                if (typeof showNotification === 'function') {
                    showNotification('üóëÔ∏è Dane zosta≈Çy usuniƒôte', 'warning');
                }
                console.log('DEBUG: onSnapshot detected deletion. scheduling reload. uid=', currentUser && currentUser.uid);
                
                // Jednorazowe prze≈Çadowanie strony
                setTimeout(() => {
                    location.reload();
                }, 1000);
                
                return;
            }
            
            // Wyczy≈õƒá flagƒô deletionReload je≈õli dane sƒÖ OK
            sessionStorage.removeItem('deletionReload');
            sessionStorage.removeItem('deletionReloadTimestamp');
            
            // Sprawd≈∫ czy zmiana nie pochodzi z tego urzƒÖdzenia
            if (typeof AppData !== 'undefined') {
                console.log('Local lastModified:', AppData.lastModified);
                
                // Je≈õli dane z chmury sƒÖ nowsze ni≈º lokalne, za≈Çaduj je
                if (cloudData.lastModified && cloudData.lastModified > (AppData.lastModified || 0)) {
                    console.log('üîÑ Cloud data is newer, updating local...');
                    if (cloudData.data) {
                        Object.assign(AppData, cloudData.data);
                        localStorage.setItem('kawaiiQuestData', JSON.stringify(AppData));
                        if (typeof updateAllDisplays === 'function') {
                            updateAllDisplays();
                        }
                        
                        if (typeof showNotification === 'function') {
                            showNotification('üîÑ Dane zsynchronizowane z innego urzƒÖdzenia', 'success');
                        }
                    }
                } else {
                    console.log('‚úì Local data is up to date');
                }
            }
        }
    }, (error) => {
        console.error('‚ùå Realtime sync error:', error);
    });
}

// Eksportuj funkcjƒô dla u≈ºycia w app.js
window.saveDataToFirestore = saveDataToFirestore;

// Funkcja do usuwania wszystkich danych z Firestore
async function deleteDataFromFirestore() {
    if (!currentUser) {
        console.log('‚ö†Ô∏è Brak zalogowanego u≈ºytkownika - usuwam tylko lokalnie');
        return;
    }
    
    try {
        const docRef = doc(db, 'users', currentUser.uid);
        
        // Usu≈Ñ dokument z Firestore
        await setDoc(docRef, {
            data: null,
            lastModified: Date.now(),
            email: currentUser.email,
            deleted: true,
            updatedAt: serverTimestamp()
        });
        
        console.log('üóëÔ∏è Dane usuniƒôte z Firestore');
        
        if (typeof showNotification === 'function') {
            showNotification('üóëÔ∏è Dane usuniƒôte z chmury', 'success');
        }
    } catch (error) {
        console.error('‚ùå B≈ÇƒÖd usuwania z Firestore:', error);
        
        if (error.code === 'permission-denied') {
            if (typeof showNotification === 'function') {
                showNotification('‚ö†Ô∏è Brak uprawnie≈Ñ do usuniƒôcia. Sprawd≈∫ regu≈Çy Firestore.', 'warning');
            }
        }
        
        throw error; // Rzuƒá b≈ÇƒÖd dalej, ≈ºeby app.js m√≥g≈Ç go obs≈Çu≈ºyƒá
    }
}

// Eksportuj funkcjƒô usuwania
window.deleteDataFromFirestore = deleteDataFromFirestore;

// ======================
// INITIALIZATION
// ======================

// Inicjalizuj po za≈Çadowaniu DOM
function initFirebaseSync() {
    console.log('üöÄ Initializing Firebase sync...');
    
    // Ustaw UI autoryzacji
    setupAuthUI();
    
    // Nas≈Çuchuj zmian stanu autoryzacji
    onAuthStateChanged(auth, (user) => {
        if (user) {
            console.log('‚úÖ User logged in:', user.email);
            onUserLogin(user);
        } else {
            console.log('‚ùå User logged out');
            onUserLogout();
        }
    });
}

// Wywo≈Çaj inicjalizacjƒô gdy DOM jest gotowy
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initFirebaseSync);
} else {
    // DOM ju≈º za≈Çadowany
    initFirebaseSync();
}
