// üî• Firebase Synchronization Module
// Obs≈Çuguje logowanie i synchronizacjƒô danych miƒôdzy urzƒÖdzeniami

let currentUser = null;
let unsubscribeSnapshot = null;

// ======================
// AUTHENTICATION
// ======================

function setupAuthUI() {
    const loginBtn = document.getElementById('loginBtn');
    const logoutBtn = document.getElementById('logoutBtn');
    const userInfo = document.getElementById('userInfo');
    
    if (loginBtn) {
        loginBtn.addEventListener('click', loginWithGoogle);
    }
    
    if (logoutBtn) {
        logoutBtn.addEventListener('click', logout);
    }
}

async function loginWithGoogle() {
    const provider = new firebase.auth.GoogleAuthProvider();
    
    try {
        playClickSound();
        const result = await auth.signInWithPopup(provider);
        console.log('‚úÖ Logged in as:', result.user.email);
        showNotification('üéâ Zalogowano pomy≈õlnie!', 'success');
    } catch (error) {
        console.error('‚ùå Login error:', error);
        
        if (error.code === 'auth/popup-blocked') {
            showNotification('‚ö†Ô∏è Odblokuj wyskakujƒÖce okna aby siƒô zalogowaƒá', 'warning');
        } else if (error.code === 'auth/cancelled-popup-request') {
            // User zamknƒÖ≈Ç okno - nic nie r√≥b
        } else {
            showNotification('‚ùå B≈ÇƒÖd logowania: ' + error.message, 'error');
        }
    }
}

async function logout() {
    try {
        playClickSound();
        await auth.signOut();
        showNotification('üëã Wylogowano pomy≈õlnie', 'success');
    } catch (error) {
        console.error('‚ùå Logout error:', error);
        showNotification('‚ùå B≈ÇƒÖd wylogowania', 'error');
    }
}

// ======================
// USER STATE CALLBACKS
// ======================

function onUserLogin(user) {
    currentUser = user;
    
    // Poka≈º info o u≈ºytkowniku
    const loginBtn = document.getElementById('loginBtn');
    const userInfo = document.getElementById('userInfo');
    const userName = document.getElementById('userName');
    const userPhoto = document.getElementById('userPhoto');
    
    if (loginBtn) loginBtn.style.display = 'none';
    if (userInfo) userInfo.style.display = 'flex';
    if (userName) userName.textContent = user.displayName || user.email;
    if (userPhoto) userPhoto.src = user.photoURL || 'https://via.placeholder.com/36';
    
    // Za≈Çaduj dane z Firestore
    loadDataFromFirestore();
    
    // Nas≈Çuchuj zmian w czasie rzeczywistym
    setupRealtimeSync();
}

function onUserLogout() {
    currentUser = null;
    
    // Poka≈º przycisk logowania
    const loginBtn = document.getElementById('loginBtn');
    const userInfo = document.getElementById('userInfo');
    
    if (loginBtn) loginBtn.style.display = 'block';
    if (userInfo) userInfo.style.display = 'none';
    
    // Zatrzymaj nas≈Çuchiwanie
    if (unsubscribeSnapshot) {
        unsubscribeSnapshot();
        unsubscribeSnapshot = null;
    }
    
    // Wyczy≈õƒá dane lokalne (opcjonalnie)
    // localStorage.clear();
}

// ======================
// FIRESTORE SYNC
// ======================

async function loadDataFromFirestore() {
    if (!currentUser) return;
    
    try {
        const docRef = db.collection('users').doc(currentUser.uid);
        const doc = await docRef.get();
        
        if (doc.exists) {
            const cloudData = doc.data();
            console.log('‚òÅÔ∏è Loaded data from cloud:', cloudData);
            
            // Merge z lokalnymi danymi (na wypadek offline changes)
            const localData = localStorage.getItem('kawaiiQuestData');
            if (localData) {
                const local = JSON.parse(localData);
                // Je≈õli lokalne dane sƒÖ nowsze, u≈ºyj ich
                if (local.lastModified && cloudData.lastModified) {
                    if (local.lastModified > cloudData.lastModified) {
                        console.log('üì± Local data is newer, syncing to cloud...');
                        await saveDataToFirestore();
                        return;
                    }
                }
            }
            
            // Za≈Çaduj dane z chmury
            Object.assign(AppData, cloudData.data || {});
            localStorage.setItem('kawaiiQuestData', JSON.stringify(AppData));
            updateAllDisplays();
            
            showNotification('‚òÅÔ∏è Dane za≈Çadowane z chmury', 'success');
        } else {
            console.log('üìù No cloud data found, creating new document');
            // Pierwsza synchronizacja - zapisz lokalne dane do chmury
            await saveDataToFirestore();
        }
    } catch (error) {
        console.error('‚ùå Error loading from Firestore:', error);
        showNotification('‚ö†Ô∏è B≈ÇƒÖd ≈Çadowania danych z chmury', 'warning');
    }
}

async function saveDataToFirestore() {
    if (!currentUser) {
        // Nie ma u≈ºytkownika - zapisz tylko lokalnie
        localStorage.setItem('kawaiiQuestData', JSON.stringify(AppData));
        return;
    }
    
    try {
        const docRef = db.collection('users').doc(currentUser.uid);
        
        await docRef.set({
            data: AppData,
            lastModified: Date.now(),
            email: currentUser.email,
            updatedAt: firebase.firestore.FieldValue.serverTimestamp()
        }, { merge: true });
        
        // Zapisz te≈º lokalnie jako backup
        localStorage.setItem('kawaiiQuestData', JSON.stringify(AppData));
        
        console.log('‚òÅÔ∏è Data saved to cloud');
    } catch (error) {
        console.error('‚ùå Error saving to Firestore:', error);
        
        // Fallback do localStorage je≈õli cloud nie dzia≈Ça
        localStorage.setItem('kawaiiQuestData', JSON.stringify(AppData));
        
        if (error.code === 'permission-denied') {
            showNotification('‚ö†Ô∏è Brak uprawnie≈Ñ do zapisu. Sprawd≈∫ regu≈Çy Firestore.', 'warning');
        }
    }
}

function setupRealtimeSync() {
    if (!currentUser || unsubscribeSnapshot) return;
    
    const docRef = db.collection('users').doc(currentUser.uid);
    
    // Nas≈Çuchuj zmian w czasie rzeczywistym
    unsubscribeSnapshot = docRef.onSnapshot((doc) => {
        if (doc.exists) {
            const cloudData = doc.data();
            
            // Sprawd≈∫ czy zmiana nie pochodzi z tego urzƒÖdzenia
            const localData = localStorage.getItem('kawaiiQuestData');
            const local = localData ? JSON.parse(localData) : {};
            
            // Je≈õli dane siƒô zmieni≈Çy na innym urzƒÖdzeniu, za≈Çaduj je
            if (cloudData.lastModified && cloudData.lastModified !== local.lastModified) {
                console.log('üîÑ Data changed on another device, syncing...');
                Object.assign(AppData, cloudData.data || {});
                AppData.lastModified = cloudData.lastModified;
                localStorage.setItem('kawaiiQuestData', JSON.stringify(AppData));
                updateAllDisplays();
                
                showNotification('üîÑ Dane zsynchronizowane z innego urzƒÖdzenia', 'success');
            }
        }
    }, (error) => {
        console.error('‚ùå Realtime sync error:', error);
    });
}

// ======================
// OVERRIDE saveData
// ======================

// Nadpisz oryginalnƒÖ funkcjƒô saveData z app.js
const originalSaveData = window.saveData;

window.saveData = function() {
    // Dodaj timestamp
    AppData.lastModified = Date.now();
    
    // Zapisz do Firestore i localStorage
    saveDataToFirestore();
    
    // Wywo≈Çaj oryginalne checkBadges
    checkBadges();
};

// ======================
// INITIALIZATION
// ======================

// Inicjalizuj Firebase po za≈Çadowaniu DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ Initializing Firebase sync...');
    
    // Sprawd≈∫ czy firebase-config.js zosta≈Ç za≈Çadowany
    if (typeof firebaseConfig === 'undefined') {
        console.warn('‚ö†Ô∏è Firebase config not found. Please configure firebase-config.js');
        showNotification('‚ö†Ô∏è Firebase nie skonfigurowany. Zobacz FIREBASE_SETUP.md', 'warning');
        return;
    }
    
    // Sprawd≈∫ czy to jest template config
    if (firebaseConfig.apiKey === 'TW√ìJ_API_KEY') {
        console.warn('‚ö†Ô∏è Firebase config is using template values. Please update firebase-config.js with your actual config.');
        showNotification('‚ö†Ô∏è Skonfiguruj Firebase w pliku firebase-config.js', 'warning');
        return;
    }
    
    // Inicjalizuj Firebase
    initializeFirebase();
    
    // Ustaw UI autoryzacji
    setupAuthUI();
});
